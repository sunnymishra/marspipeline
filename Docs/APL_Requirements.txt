APL(aggregation pipeline):
- Support multiple end-sites	
	 On Demand Mode 1. Scrape the site 2. Call site's ajax endpoints and fetch JSON response 
	 Batch mode     1. Call Site's partner APIs (eg. Amazon PA API)
- Fetch following: item name, item small image, item url, affiliate signed url, item unique number
- Nightly Batch job to update Datastore with latest Image and price info. Remove item from Datastore if Endsite doesn't support
- Weekly Batch job to delete Screenshot and Logs which are older than 1 week. Also roll Selenium nohup.log file without restating selenium standalone server.
- Flagging and Alert system (Send SMS or Email) if Scraping is failing. Reads from scraperapp.log and selenium nohup.log file to identify errors and creates Report HTML every 30 mints. Emails if errors are more (define more). Also priority given to OrderBot than APL
- How to return error codes in response to the App. Need to log all requests into DB
- OptimisticThread - go check Lucene and return    LaboriousThread - go scrape Endsite
- JOB table: Maintain status for each Endsite to return values fast for consumption
- Use Cloudinary callback url
- Have intermediate status when everything else is loaded in db except image url.

- Amazon *Sponsored Products* need to be filtered out from Result list
- Myntra/Amazon/etc if search text returned no results, then appropriate action needs to be taken
- Take screenshot only when an exception occurs. Don't take any screenshot for same Job if once taken.
- All *Duration* audit logs should have Job Id and AgentName
- Build an analytics tool to analyse and report errors and job durations and drill downs
- Add status for individual Endsites in DB
- If CancellationException happens in Callable class, the Thread continues to run even after future.get() is invoked. This needs to be stopped
- Agents should not call business.properties props with agent's name hardcoded. eg. koovs.relative.json.price1
- If agent got MongoDB duplicate exception while saving Item in DB, then we have to add current JobId into that existing DB Item's JobId array
- application.properties env. specific paths, secret token, etc should come from script file and not hardcoded and committed in application.properties

Endsites: Myntra, Amazon, Flipkart, Nykaa, Koovs (new) 

Job
----
_id
items[]

{signature=caf5f7a62b6ca96869da8d20d03e55b87f362f70, 
format=jpg, resource_type=image, 
secure_url=https://res.cloudinary.com/mars/image/upload/v1503998705/vf2qarw7eafnwxih9ggy.jpg, 
created_at=2017-08-29T09:25:05Z, type=upload, version=1503998705, 
url=http://res.cloudinary.com/mars/image/upload/v1503998705/vf2qarw7eafnwxih9ggy.jpg, 
public_id=vf2qarw7eafnwxih9ggy, tags=[myntra], 
original_filename=11482126737792-Floyd-Unisex-Aviator-sunglasses-4581482126737672-1_mini, 
bytes=2769, width=180, 
etag=9359e29849da7767f5e5659241441c6d, height=240}

